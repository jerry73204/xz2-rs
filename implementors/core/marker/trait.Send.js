(function() {var implementors = {};
implementors["lzma_sys"] = [{"text":"impl !Send for lzma_allocator","synthetic":true,"types":[]},{"text":"impl !Send for lzma_stream","synthetic":true,"types":[]},{"text":"impl !Send for lzma_filter","synthetic":true,"types":[]},{"text":"impl !Send for lzma_mt","synthetic":true,"types":[]},{"text":"impl !Send for lzma_options_lzma","synthetic":true,"types":[]},{"text":"impl Send for lzma_stream_flags","synthetic":true,"types":[]},{"text":"impl Send for lzma_options_bcj","synthetic":true,"types":[]},{"text":"impl Send for lzma_internal","synthetic":true,"types":[]}];
implementors["xz2"] = [{"text":"impl !Send for LzmaOptions","synthetic":true,"types":[]},{"text":"impl !Send for MtStreamBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Filters","synthetic":true,"types":[]},{"text":"impl Send for Action","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Check","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for MatchFinder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for XzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for XzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for XzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for XzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for XzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for XzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Stream","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()